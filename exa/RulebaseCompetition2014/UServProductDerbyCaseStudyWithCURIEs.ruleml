<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://deliberation.ruleml.org/1.03/relaxng/nafneghornlogeq_relaxed.rnc"
  ?>
<RuleML xmlns="http://ruleml.org/spec" xmlns:us="userv:"
  xmlns:pred="http://www.w3.org/2007/rif-builtin-predicate#"
  xmlns:prolog="http://prolog-language.org/predicates#"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:userv="http://userv.org/ontology/"
  xmlns:ui="http://userv.org/ontology/i/"
  xsi:schemaLocation="http://ruleml.org/spec 
  http://deliberation.ruleml.org/1.03/xsd/nafneghornlogeq.xsd">
  <!--
  Matthias Tylkowski, Martin Müller, Experiences Using Deliberation RuleML 1.01 as Rule Interchange Language,
  In T. Patkos, et al(Eds.) Proceedings of the RuleML 2014 Challenge and the RuleML 2014 Doctoral Consortium,  
  Prague, Czech Republic, August 18-20, 2014. http://ceur-ws.org/Vol-1211/paper8.pdf, http://de.slideshare.net/binarypark/ruleml2014f
-->
  <!-- Axioms -->
  <Assert>
    <!-- 
      definition of the global constant  HighTheftProbabilityAutoList as a list of individuals 
    -->
    <Equal>
      <Ind>HighTheftProbabilityAutoList</Ind>
      <Plex>
        <Ind>car1</Ind>
        <Ind>car3</Ind>
        <Ind>car5</Ind>
        <Ind>car6</Ind>
      </Plex>
    </Equal>

    <!-- subclassOf relationships -that could be defined by an external data model -->
    <!-- any driver is a person -->
    <Forall>
      <Var>X</Var>
      <Implies>
        <Atom>
          <Rel iri="userv:Driver">driver</Rel>
          <Var>X</Var>
        </Atom>

        <Atom>
          <Rel iri="userv:Person">person</Rel>
          <Var>X</Var>
        </Atom>
      </Implies>
    </Forall>

    <!-- any young driver is a driver -->
    <Forall>
      <Var>X</Var>
      <Implies>
        <Atom>
          <Rel iri="userv:YoungDriver">youngDriver</Rel>
          <Var>X</Var>
        </Atom>

        <Atom>
          <Rel iri="userv:Driver">driver</Rel>
          <Var>X</Var>
        </Atom>
      </Implies>
    </Forall>

    <!-- any senior driver is a driver -->
    <Forall>
      <Var>X</Var>
      <Implies>
        <Atom>
          <Rel iri="userv:SeniorDriver">seniorDriver</Rel>
          <Var>X</Var>
        </Atom>

        <Atom>
          <Rel iri="userv:Driver">driver</Rel>
          <Var>X</Var>
        </Atom>
      </Implies>
    </Forall>

    <!-- any senior driver  is not a young driver -->
    <Forall>
      <Var>X</Var>
      <Implies>
        <Atom>
          <Rel iri="userv:SeniorDriver">seniorDriver</Rel>
          <Var>X</Var>
        </Atom>
        <Neg>
          <Atom>
            <Rel iri="userv:YoungDriver">youngDriver</Rel>
            <Var>X</Var>
          </Atom>
        </Neg>
      </Implies>
    </Forall>

    <!-- any young driver is not a senior driver -->
    <Forall>
      <Var>X</Var>
      <Implies>
        <Atom>
          <Rel iri="userv:YoungDriver">youngDriver</Rel>
          <Var>X</Var>
        </Atom>
        <Neg>
          <Atom>
            <Rel iri="userv:SeniorDriver">seniorDriver</Rel>
            <Var>X</Var>
          </Atom>
        </Neg>
      </Implies>
    </Forall>
  </Assert>

  <!-- facts -->
  <Assert>
    <Rulebase>
      <Atom>
        <Rel iri="userv:carModel"/>
        <Ind iri="ui:a9fccd3a-a851-4e80-de3a8c2e15ba"
          type="userv:LuxuryCar">car4</Ind>
        <Data xsi:type="xs:string">Honda Odyssey</Data>
      </Atom>
      <Atom>
        <Rel iri="userv:price">price</Rel>
        <Ind iri="ui:a9fccd3a-a851-4e80-de3a8c2e15ba"
          type="userv:LuxuryCar">car4</Ind>
        <Data xsi:type="xs:positiveInteger">39000</Data>
      </Atom>
      <Atom>
        <Rel iri="userv:hasAlarm"/>
        <Ind iri="ui:a9fccd3a-a851-4e80-de3a8c2e15ba"
          type="userv:LuxuryCar">car4</Ind>
      </Atom>
      <Atom>
        <Rel iri="userv:airbags"/>
        <Ind iri="ui:a9fccd3a-a851-4e80-de3a8c2e15ba"
          type="userv:LuxuryCar">car4</Ind>
        <Plex>
          <Data xsi:type="xs:string">driverAirbag</Data>
          <Data xsi:type="xs:string">frontPassengerAirbag</Data>
          <Data xsi:type="xs:string">sideAirbag</Data>
        </Plex>
      </Atom>
    </Rulebase>

    <Rulebase>
      <Atom>
        <Rel iri="userv:gender"/>
        <Ind iri="ui:a9fccd3a-a851-4e80-de3a8c2e15bb"
          type="userv:Person">Sara</Ind>
        <Data xsi:type="xs:string">female</Data>
      </Atom>

      <Atom>
        <Rel iri="userv:age"/>
        <Ind iri="ui:a9fccd3a-a851-4e80-de3a8c2e15bb"
          type="userv:Person">Sara</Ind>
        <Data xsi:type="xs:positiveInteger">38</Data>
      </Atom>

      <Atom>
        <Rel iri="userv:isMarried"/>
        <Ind iri="ui:a9fccd3a-a851-4e80-de3a8c2e15bb"
          type="userv:Person">Sara</Ind>
      </Atom>

      <Atom>
        <Rel iri="userv:placeOfLiving"/>
        <Ind iri="ui:a9fccd3a-a851-4e80-de3a8c2e15bb"
          type="userv:Person">Sara</Ind>
        <Data xsi:type="xs:string">Arizona</Data>
      </Atom>

      <Atom>
        <Rel iri="userv:noOfAccidents"/>
        <Ind iri="ui:a9fccd3a-a851-4e80-de3a8c2e15bb"
          type="userv:Driver">Sara</Ind>
        <Data xsi:type="xs:integer">0</Data>
      </Atom>

      <Atom>
        <Rel iri="userv:noOfMovingViolations"/>
        <Ind iri="ui:a9fccd3a-a851-4e80-de3a8c2e15bb"
          type="userv:Driver">Sara</Ind>
        <Data xsi:type="xs:integer">1</Data>
      </Atom>

      <Atom>
        <Rel iri="userv:noOfDUI"/>
        <Ind iri="ui:a9fccd3a-a851-4e80-de3a8c2e15bb"
          type="userv:Driver">Sara</Ind>
        <Data xsi:type="xs:integer">0</Data>
      </Atom>
    </Rulebase>
  </Assert>

  <!-- Rulebases-->
  <Assert>
    <Rulebase xml:id="theftRating">
      <!--  Processing car's theftRating    -->
      <meta>
        <Atom>
          <Rel iri="userv:theftRating">theftRating</Rel>
        </Atom>
      </meta>
 
      <!-- If the car is a convertible, then the car’s potential theft rating is high. -->
      <Forall>
        <Var type="userv:ConvertibleCar">C</Var>
        <Implies direction="backward">
          <if>
            <Atom>
              <Rel iri="userv:convertibleCar">convertibleCar</Rel>
              <Var>C</Var>
            </Atom>
          </if>
          <then>
            <Atom>
              <Rel iri="userv:theftRating">theftRating</Rel>
              <Var type="userv:ConvertibleCar">C</Var>
              <Data>
                <!-- <Data type = "us:Rating"> -->
                <us:ratingValue xsi:type="xs:positiveInteger">4</us:ratingValue>
                <us:ratingVerbalization xml:lang="en">high</us:ratingVerbalization>
              </Data>
            </Atom>
          </then>
        </Implies>
      </Forall>

      <!-- 
         If the car’s price is greater than $45,000, 
         then the car’s potential theft rating is high. 
       -->
      <Forall>
        <Var type="userv:Car">C</Var>
        <Implies direction="backward">
          <And>
            <Atom>
              <Rel iri="userv:price">price</Rel>
              <Var>C</Var>
              <Var type="xs:positiveInteger">P</Var>
            </Atom>
            <Atom>
              <Rel iri="pred:numeric-greater-than">gt</Rel>
              <Var type="xs:positiveInteger">P</Var>
              <Data xsi:type="xs:integer">45000</Data>
            </Atom>
          </And>
          <Atom>
            <Rel iri="userv:theftRating">theftRating</Rel>
            <Var>C</Var>
            <Data>
              <!-- @type = "us:Rating"-->
              <us:ratingValue xsi:type="xs:positiveInteger">4</us:ratingValue>
              <us:ratingVerbalization xml:lang="en">high</us:ratingVerbalization>
            </Data>
          </Atom>
        </Implies>
      </Forall>

      <!-- 
         If the car model is on the list of “High Theft Probability Auto”, then the car’s potential
         theft rating is high. 
       -->
      <Forall>
        <Var type="userv:Car">C</Var>
        <Implies direction="backward">
          <And>
            <Atom>
              <Rel iri="userv:carModel">carModel</Rel>
              <Var>C</Var>
              <Var type="xs:string">M</Var>
            </Atom>
            <Atom>
              <Rel iri="prolog:member">member</Rel>
              <Var type="xs:string">M</Var>
              <Ind type="rdf:Bag">HighTheftProbabilityAutoList</Ind>
            </Atom>
          </And>
          <Atom>
            <Rel iri="userv:theftRating">theftRating</Rel>
            <Var type="userv:Car">C</Var>
            <Data>
              <!-- @type = "us:Rating"-->
              <us:ratingValue xsi:type="xs:positiveInteger">4</us:ratingValue>
            </Data>
          </Atom>
        </Implies>
      </Forall>

      <!-- 
        If all of the following are true, then the car’s potential theft rating is moderate.
        - car’s price is between $20,000 and $45,000,
        - car model is not on the list of “High Theft Probability Auto”
       -->
      <Forall>
        <Var type="userv:Car">C</Var>
        <Implies direction="backward">
          <if>
            <And>
              <Atom>
                <Rel iri="userv:price">price</Rel>
                <Var>C</Var>
                <Var type="xs:positiveInteger">P</Var>
              </Atom>
              <Atom>
                <Rel iri="pred:numeric-greater-than-or-equal">ge</Rel>
                <Var type="xs:positiveInteger">P</Var>
                <Data xsi:type="xs:integer">25000</Data>
              </Atom>
              <Atom>
                <Rel iri="pred:numeric-less-than-or-equal">le</Rel>
                <Var type="xs:positiveInteger">P</Var>
                <Data xsi:type="xs:integer">45000</Data>
              </Atom>
              <Atom>
                <Rel iri="userv:carModel">carModel</Rel>
                <Var type="userv:Car">C</Var>
                <Var type="xs:string">M</Var>
              </Atom>
              <Naf>
                <Atom>
                  <Rel iri="prolog:member">member</Rel>
                  <Var type="xs:string">M</Var>
                  <Ind type="rdf:Bag">HighTheftProbabilityAutoList</Ind>
                </Atom>
              </Naf>
            </And>
          </if>
          <then>
            <Atom>
              <Rel iri="userv:theftRating">theftRating</Rel>
              <Var type="userv:Car">C</Var>
              <Data>
                <!-- @type = "us:Rating"-->
                <us:ratingValue xsi:type="xs:positiveInteger">3</us:ratingValue>
                <us:ratingVerbalization xml:lang="en">moderate</us:ratingVerbalization>
              </Data>
            </Atom>
          </then>
        </Implies>
      </Forall>

      <!-- 
        If all of the following are true, then the car’s potential theft rating is low:
        - car’s price is less that $20,000
        - car model is not on the list of “High Theft Probability Auto”
       -->
      <Forall>
        <Var type="userv:Car">C</Var>
        <Implies direction="backward">
          <if>
            <And>
              <Atom>
                <Rel iri="userv:price">price</Rel>
                <Var>C</Var>
                <Var type="xs:positiveInteger">P</Var>
              </Atom>

              <Atom>
                <Rel iri="userv:carModel">carModel</Rel>
                <Var type="userv:Car">C</Var>
                <Var type="xs:string">M</Var>
              </Atom>

              <Atom>
                <Rel iri="pred:numeric-less-than">lt</Rel>
                <Var type="xs:positiveInteger">P</Var>
                <Data xsi:type="xs:integer">25000</Data>
              </Atom>

              <Naf>
                <Atom>
                  <Rel iri="userv:member">member</Rel>
                  <Var type="xs:string">M</Var>
                  <Ind type="rdf:Bag">HighTheftProbabilityAutoList</Ind>
                </Atom>
              </Naf>
            </And>
          </if>
          <then>
            <Atom>
              <Rel iri="userv:theftRating">theftRating</Rel>
              <Var type="userv:Car">C</Var>
              <Data>
                <!-- @type = "us:Rating"-->
                <us:ratingValue xsi:type="xs:positiveInteger">1</us:ratingValue>
                <us:ratingVerbalization xml:lang="en">low</us:ratingVerbalization>
              </Data>
            </Atom>
          </then>
        </Implies>
      </Forall>
    </Rulebase>

    <Rulebase xml:id="injuryRating">
      <meta>
        <Atom>
          <Rel iri="userv:injuryRating">injuryRating</Rel>
        </Atom>
      </meta>

      <!-- 
        If the car has no airbags, then the car’s potential occupant injury 
        rating is extremely high. 
      -->
      <Forall>
        <Var type="userv:Car">C</Var>
        <Implies direction="backward">
          <Atom>
            <Rel iri="userv:airbag">airbags</Rel>
            <Var>C</Var>
            <Data>
              <!-- @type = rdf:Bag -->
            </Data>
          </Atom>
          <Atom>
            <Rel iri="userv:injuryRating">injuryRating</Rel>
            <Var>C</Var>
            <Data>
              <us:value xsi:type="xs:positiveInteger">5</us:value>
              <us:verbalization xml:lang="en">extremely high</us:verbalization>
            </Data>
          </Atom>
        </Implies>
      </Forall>

      <!--
         If the car is a convertible and has no roll bar, then the potential occupant injury is
        extremely high. 
       -->
      <Forall>
        <Var type="userv:ConvertibleCar">C</Var>
        <Implies direction="backward">
          <Naf>
            <Atom>
              <Rel iri="userv:hasRollBar">hasRollBar</Rel>
              <Var type="userv:ConvertibleCar">C</Var>
            </Atom>
          </Naf>
          <Atom>
            <Rel iri="userv:injuryRating">injuryRating</Rel>
            <Var>C</Var>
            <Data>
              <us:value xsi:type="xs:positiveInteger">5</us:value>
              <us:verbalization xml:lang="en">extremely high</us:verbalization>
            </Data>
          </Atom>
        </Implies>
      </Forall>

      <!-- 
        If the car only has driver’s air bag, then the car’s potential occupant 
        injury rating is high.
       -->
      <Forall>
        <Var type="userv:Car">C</Var>
        <Implies direction="backward">
          <Atom>
            <Rel iri="userv:airbag">airbags</Rel>
            <Var>C</Var>
            <Plex>
              <Data xsi:type="xs:string">driver</Data>
            </Plex>
          </Atom>
          <Atom>
            <Rel iri="userv:injuryRating">injuryRating</Rel>
            <Var>C</Var>
            <Data>
              <us:value xsi:type="xs:positiveInteger">4</us:value>
              <us:verbalization xml:lang="en">high</us:verbalization>
            </Data>
          </Atom>
        </Implies>
      </Forall>

      <!-- 
        If the car has driver’s and front passenger air bags, then the car’s potential occupant
        injury rating is moderate.
       -->
      <Forall>
        <Var type="userv:Car">C</Var>
        <Implies direction="backward">
          <Atom>
            <Rel iri="userv:airbag">airbags</Rel>
            <Var>C</Var>
            <Plex>
              <Data xsi:type="xs:string">driver</Data>
              <Data xsi:type="xs:string">frontPassenger</Data>
            </Plex>
          </Atom>
          <Atom>
            <Rel iri="userv:injuryRating">injuryRating</Rel>
            <Var>C</Var>
            <Data>
              <us:value xsi:type="xs:positiveInteger">3</us:value>
              <us:verbalization xml:lang="en">moderate</us:verbalization>
            </Data>
          </Atom>
        </Implies>
      </Forall>

      <!-- 
        If the car has driver’s front passenger and side panel air bags, then the car’s potential
        occupant injury is low.
       -->
      <Forall>
        <Var type="userv:Car">C</Var>
        <Implies direction="backward">
          <Atom>
            <Rel iri="userv:airbag">airbags</Rel>
            <Var>C</Var>
            <Plex>
              <Data xsi:type="xs:string">driver</Data>
              <Data xsi:type="xs:string">frontPassenger</Data>
              <Data xsi:type="xs:string">sidePanel</Data>
            </Plex>
          </Atom>
          <Atom>
            <Rel iri="userv:injuryRating">injuryRating</Rel>
            <Var>C</Var>
            <Data>
              <us:value xsi:type="xs:positiveInteger">1</us:value>
              <us:verbalization xml:lang="en">low</us:verbalization>
            </Data>
          </Atom>
        </Implies>
      </Forall>
    </Rulebase>
  </Assert>

  <Assert>
    <Rulebase>
      <meta>
        <Atom>
          <Rel iri="userv:autoEligibility">eligibility</Rel>
        </Atom>
      </meta>

      <!-- 
         If the Potential Occupant Injury Rating is extremely high, then the auto 
         eligibility is “not eligible" 
       -->
      <Forall>
        <Var type="userv:Car">C</Var>
        <Implies direction="backward">
          <Atom>
            <Rel iri="userv:injuryRating">injuryRating</Rel>
            <Var>C</Var>
            <Data>
              <us:value xsi:type="xs:positiveInteger">5</us:value>
            </Data>
          </Atom>
          <Atom>
            <Rel iri="userv:autoEligibility">eligibility</Rel>
            <Var>C</Var>
            <Data>
              <us:eligibilityValue>0</us:eligibilityValue>
              <us:eligibilityVerbalization xml:lang="en">not eligible</us:eligibilityVerbalization>
            </Data>
          </Atom>
        </Implies>
      </Forall>

      <!-- 
         If the Potential Occupant Injury Rating is high, then the auto eligibility is “provisional”. 
       -->
      <Forall>
        <Var type="userv:Car">C</Var>
        <Implies direction="backward">
          <Atom>
            <Rel iri="userv:injuryRating">injuryRating</Rel>
            <Var>C</Var>
            <Data>
              <us:value xsi:type="xs:positiveInteger">4</us:value>
            </Data>
          </Atom>
          <Atom>
            <Rel iri="userv:autoEligibility">eligibility</Rel>
            <Var>C</Var>
            <Data>
              <us:eligibilityValue>1</us:eligibilityValue>
              <us:eligibilityVerbalization xml:lang="en">provisional</us:eligibilityVerbalization>
            </Data>
          </Atom>
        </Implies>
      </Forall>

      <!-- If the Potential Theft Rating is high, then the auto eligibility is “provisional”. -->
      <Forall>
        <Var type="userv:Car">C</Var>
        <Implies direction="backward">
          <Atom>
            <Rel iri="userv:theftRating">theftRating</Rel>
            <Var type="userv:Car">C</Var>
            <Data>
              <!-- @type = "us:Rating"-->
              <us:ratingValue xsi:type="xs:positiveInteger">4</us:ratingValue>
            </Data>
          </Atom>
          <Atom>
            <Rel iri="userv:autoEligibility">eligibility</Rel>
            <Var>C</Var>
            <Data>
              <us:eligibilityValue>1</us:eligibilityValue>
              <us:eligibilityVerbalization xml:lang="en">provisional</us:eligibilityVerbalization>
            </Data>
          </Atom>
        </Implies>
      </Forall>


      <!-- 
         If none of the following is true, then the auto eligibility is “eligible”
           - Auto eligibility is “not eligible”
           - Auto eligibility is “provisional
        -->
      <Forall>
        <Var type="userv:Car">C</Var>
        <Implies direction="backward">
          <And>
            <Naf>
              <Atom>
                <Rel iri="userv:autoEligibility">eligibility</Rel>
                <Var>C</Var>
                <Data>
                  <us:eligibilityValue>0</us:eligibilityValue>
                </Data>
              </Atom>
            </Naf>
            <Naf>
              <Atom>
                <Rel iri="userv:autoEligibility">eligibility</Rel>
                <Var>C</Var>
                <Data>
                  <us:eligibilityValue>1</us:eligibilityValue>
                </Data>
              </Atom>
            </Naf>
          </And>
          <Atom>
            <Rel iri="userv:autoEligibility">eligibility</Rel>
            <Var>C</Var>
            <Data>
              <us:eligibilityValue>2</us:eligibilityValue>
              <us:eligibilityVerbalization xml:lang="en">eligible</us:eligibilityVerbalization>
            </Data>
          </Atom>
        </Implies>
      </Forall>
    </Rulebase>
  </Assert>

  <Assert>
    <Rulebase>
      <meta>
        <Atom>
          <Rel iri="userv:YoungDriver">youngDriver</Rel>
        </Atom>
      </meta>

      <!-- If the driver is male and is under the age of 25, then young driver. -->
      <Forall>
        <Var type="userv:Driver">D</Var>
        <Implies direction="backward">
          <And>
            <Atom>
              <Rel iri="userv:gender">male</Rel>
              <Var type="userv:Driver">D</Var>
              <Data xsi:type="xs:string">male</Data>
            </Atom>
            <Atom>
              <Rel iri="userv:age">age</Rel>
              <Var type="userv:Driver">D</Var>
              <Var>A</Var>
            </Atom>
            <Atom>
              <Rel iri="pred:numeric-less-than">lt</Rel>
              <Var type="xs:positiveInteger">A</Var>
              <Data xsi:type="xs:integer">25</Data>
            </Atom>
          </And>
          <Atom>
            <Rel iri="userv:YoungDriver">youngDriver</Rel>
            <Var>D</Var>
          </Atom>
        </Implies>
      </Forall>

      <Forall>
        <Var type="userv:Driver">D</Var>
        <Implies direction="backward">
          <And>
            <Atom>
              <Rel iri="userv:gender">female</Rel>
              <Var type="userv:Driver">D</Var>
              <Data xsi:type="xs:string">female</Data>
            </Atom>
            <Atom>
              <Rel iri="userv:age">age</Rel>
              <Var type="userv:Driver">D</Var>
              <Var>A</Var>
            </Atom>
            <Atom>
              <Rel iri="pred:numeric-less-than">lt</Rel>
              <Var type="xs:positiveInteger">A</Var>
              <Data xsi:type="xs:integer">20</Data>
            </Atom>
          </And>

          <Atom>
            <Rel iri="userv:YoungDriver">youngDriver</Rel>
            <Var>D</Var>
          </Atom>
        </Implies>
      </Forall>
    </Rulebase>
  </Assert>

  <Assert>
    <Rulebase>
      <meta>
        <Atom>
          <Rel iri="userv:SeniorDriver">seniorDriver</Rel>
        </Atom>
      </meta>

      <!-- If the driver is over the age of 70, then senior driver. -->
      <Forall>
        <Var type="userv:Driver">D</Var>
        <Implies direction="backward">
          <And>
            <Atom>
              <Rel iri="userv:age">age</Rel>
              <Var type="userv:Driver">D</Var>
              <Var>A</Var>
            </Atom>

            <Atom>
              <Rel iri="pred:numeric-greater-than">gt</Rel>
              <Var type="xs:positiveInteger">A</Var>
              <Data xsi:type="xs:integer">70</Data>
            </Atom>
          </And>

          <Atom>
            <Rel iri="userv:SeniorDriver">seniorDriver</Rel>
            <Var>D</Var>
          </Atom>
        </Implies>
      </Forall>
    </Rulebase>
  </Assert>

  <Assert>
    <Rulebase>
      <meta>
        <Atom>
          <Rel iri="userv:isEligible">isEligible</Rel>
        </Atom>
      </meta>

      <!-- If young driver and driver has training certification, then eligible driver. -->
      <Forall>
        <Var type="userv:Driver">D</Var>
        <Implies direction="backward">
          <And>
            <Atom>
              <Rel iri="userv:hasTrainingCertification">
                trainingCertifcation
              </Rel>
              <Var type="userv:Driver">D</Var>
            </Atom>

            <Atom>
              <Rel iri="userv:YoungDriver">youngDriver</Rel>
              <Var>D</Var>
            </Atom>
          </And>

          <Atom>
            <Rel iri="userv:isEligible">isEligible</Rel>
            <Var>D</Var>
          </Atom>
        </Implies>
      </Forall>

      <!--If senior driver and driver has training certification, then eligible driver. -->
      <Forall>
        <Var type="userv:Driver">D</Var>
        <Implies direction="backward">
          <And>
            <Atom>
              <Rel iri="userv:hasTrainingCertification">
                hasTrainingCertifcation
              </Rel>
              <Var type="userv:Driver">D</Var>
            </Atom>

            <Atom>
              <Rel iri="userv:SeniorDriver">seniorDriver</Rel>
              <Var>D</Var>
            </Atom>
          </And>

          <Atom>
            <Rel iri="userv:isEligible">isEligible</Rel>
            <Var>D</Var>
          </Atom>
        </Implies>
      </Forall>

      <!--
          If the following are not true, then eligible driver
            - Young driver
            - Senior driver
       -->
      <Forall>
        <Var type="userv:Driver">D</Var>
        <Implies direction="backward">
          <And>
            <Atom>
              <Rel iri="userv:Driver">Driver</Rel>
              <Var>D</Var>
            </Atom>

            <Naf>
              <Atom>
                <Rel iri="userv:YoungDriver">youngDriver</Rel>
                <Var>D</Var>
              </Atom>
            </Naf>

            <Naf>
              <Atom>
                <Rel iri="userv:SeniorDriver">seniorDriver</Rel>
                <Var>D</Var>
              </Atom>
            </Naf>
          </And>

          <Atom>
            <Rel iri="userv:isEligible">isEligible</Rel>
            <Var>D</Var>
          </Atom>
        </Implies>
      </Forall>
    </Rulebase>
  </Assert>

  <Assert>
    <Rulebase>
      <meta>
        <Atom>
          <Rel iri="userv:hasTrainingCertification"> 
            hasTrainingCertification
          </Rel>
        </Atom>
      </meta>

      <!-- 
        If driver has taken driver’s training from school then driver has training certification
      -->
      <Forall>
        <Var type="userv:Driver">D</Var>
        <Implies direction="backward">
          <Atom>
            <Rel iri="userv:hasTrainingFromSchool">
                hasTrainingFromSchool
            </Rel>
            <Var type="userv:Driver">D</Var>
          </Atom>

          <Atom>
            <Rel iri="userv:hasTrainingCertification">
                hasTrainingCertifcation
            </Rel>
            <Var type="userv:Driver">D</Var>
          </Atom>
        </Implies>
      </Forall>

      <!--
          If driver has taken driver’s training from a licensed driver training company, 
          then driver has training certification 
       -->
      <Forall>
        <Var type="userv:Driver">D</Var>
        <Implies direction="backward">
          <Atom>
            <Rel iri="userv:hasTrainingFromLicensedDriverTrainingCompany">
              hasTrainingFromLicensedDriverTrainingCompany
            </Rel>
            <Var type="userv:Driver">D</Var>
          </Atom>

          <Atom>
            <Rel iri="userv:hasTrainingCertification">
                hasTrainingCertifcation
            </Rel>
            <Var type="userv:Driver">D</Var>
          </Atom>
        </Implies>
      </Forall>

      <!--
         If driver had taken a senior citizen driver’s refresher course, 
         then driver has training certification.
       -->
      <Forall>
        <Var type="userv:Driver">D</Var>
        <Implies direction="backward">
          <Atom>
            <Rel iri="userv:hasSeniorDriverRefresherCourse">
              hasSeniorDriverRefresherCourse 
            </Rel>
            <Var type="userv:Driver">D</Var>
          </Atom>

          <Atom>
            <Rel iri="userv:hasTrainingCertification">
                hasTrainingCertifcation
            </Rel>
            <Var type="userv:Driver">D</Var>
          </Atom>
        </Implies>
      </Forall>
    </Rulebase>
  </Assert>

  <Assert>
    <Rulebase>
      <meta>
        <Atom>
          <Rel iri="userv:DriverRiskRating">driverRiskRating</Rel>
        </Atom>
      </meta>

      <!-- 
         If the driver has been convicted of a DUI, then the driver qualifies as a High Risk Driver 
       -->
      <Forall>
        <Var type="userv:Driver">D</Var>
        <Implies direction="backward">
          <And>
            <Atom>
              <Rel iri="userv:noOfDUI">noOfDUI</Rel>
              <Var type="userv:Driver">D</Var>
              <Var>DUI</Var>
            </Atom>

            <Atom>
              <Rel iri="pred:numeric-greater-than">gt</Rel>
              <Var type="xs:positiveInteger">DUI</Var>
              <Data xsi:type="xs:integer">0</Data>
            </Atom>
          </And>

          <Atom>
            <Rel iri="userv:DriverRiskRating">driverRiskRating</Rel>
            <Var>D</Var>
            <Data>
              <us:value xsi:type="xs:positiveInteger">4</us:value>
              <us:verbalization xml:lang="en">high</us:verbalization>
            </Data>
          </Atom>
        </Implies>
      </Forall>

      <!--
        If the number of accidents the applicant has been involved in is greater than 2, 
        then the driver qualifies as a High Risk Driver.
       -->
      <Forall>
        <Var type="userv:Driver">D</Var>
        <Implies direction="backward">
          <And>
            <Atom>
              <Rel iri="userv:noOfAccidentsI">noOfAccidents</Rel>
              <Var type="userv:Driver">D</Var>
              <Var>accidents</Var>
            </Atom>

            <Atom>
              <Rel iri="pred:numeric-greater-than">gt</Rel>
              <Var type="xs:positiveInteger">accidents</Var>
              <Data xsi:type="xs:integer">2</Data>
            </Atom>
          </And>

          <Atom>
            <Rel iri="userv:DriverRiskRating">driverRiskRating</Rel>
            <Var>D</Var>
            <Data>
              <us:value xsi:type="xs:positiveInteger">4</us:value>
              <us:verbalization xml:lang="en">high</us:verbalization>
            </Data>
          </Atom>
        </Implies>
      </Forall>

      <!--
          If the driver has had more than 3 moving violations in the last two years, 
          then the driver qualifies as a High Risk Driver. 
       -->
    </Rulebase>
  </Assert>
</RuleML>
