<?xml version="1.0" encoding="UTF-8"?>
<RuleML xmlns="http://ruleml.org/spec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://ruleml.org/spec http://deliberation.ruleml.org/1.03/xsd/datalogplus_min_normal.xsd">
  <!-- Some of these examples are from
    "A general Datalog-based framework for tractable query answering 
    over ontologies",
    Andrea CalÃ¬,
    Georg Gottlob
    Thomas Lukasiewicz  
    http://dx.doi.org/10.1016/j.websem.2012.03.001
  	(preprint at http://www.websemanticsjournal.org/index.php/ps/article/view/289)
    -->
  <!-- This RuleML Document incrementally asserts into, retracts from and 
       queries a rulebase (within the <RuleML> element) for a total of
       28 transactions: 13 Asserts, 2 Retracts and 13 Queries.
       Each Query demonstrates the semantics of the previous Assert or Retract
       by providing (in the XML comments) the expected answer to the Query.
    -->
  <act index="1">
    <Assert>
      <!-- 
         Equations are allowed as facts:
         William is an employee.
         "Bill" is an alias for "William".
         Sublanguage: datagroundfacteq
      -->
      <formula>
        <Atom>
          <op><Rel>employee</Rel></op>
          <arg index="1"><Ind>William</Ind></arg>
        </Atom>
      </formula>
      <formula>
        <Equal>
          <left>
            <Ind>Bill</Ind>
          </left>
          <right>
            <Ind>William</Ind>
          </right>
        </Equal>
      </formula>
    </Assert>
  </act>
  <act index="2">
    <Query>
      <!-- 
         Who are the employees?
         Answers: 
         x: <Ind>Bill</Ind>
         x: <Ind>William</Ind>
         Sublanguage: datalogeq
      -->
      <formula>
        <Atom>
          <op><Rel>employee</Rel></op>
          <arg index="1"><Var>x</Var></arg>
        </Atom>
      </formula>
    </Query>
  </act>
  <act index="3">
    <Assert>
      <!-- 
         Equations may be universally quantified.
         This fact is a degenerate case, corresponding to the body of an implication being empty.
         The following makes the reflexive property of equality explicit (as built into most systems):
         Everything is equal to itself.
         Sublanguage: datalogeq         
      -->
      <formula>
        <Forall>
          <declare>
            <Var>x</Var>
          </declare>
          <formula>
            <Equal>
              <left>
                <Var>x</Var>
              </left>
              <right>
                <Var>x</Var>
              </right>
            </Equal>
          </formula>
        </Forall>
      </formula>
    </Assert>
  </act>
  <act index="4">
    <Query>
      <!--
         What is equal to itself?
         Answers:
         x: <Ind>Bill</Ind>
         x: <Ind>William</Ind>
         Sublanguage: datalogeq         
      -->
      <formula>
        <Equal>
          <left>
            <Var>x</Var>
          </left>
          <right>
            <Var>x</Var>
          </right>
        </Equal>
      </formula>
    </Query>
  </act>
  <act index="5">
    <Assert>
      <!-- 
         Non-ground facts are allowed. 
         John is the CEO.
         John is responsible for everything.
         Sublanguage: datalogeq         
      -->
      <formula>
        <Atom>
          <op><Rel>CEO</Rel></op>
          <arg index="1"><Ind>John</Ind></arg>
        </Atom>
      </formula>
      <formula>
        <Forall>
          <declare>
            <Var>x</Var>
          </declare>
          <formula>
            <Atom>
              <op><Rel>responsible_for</Rel></op>
              <arg index="1"><Ind>John</Ind></arg>
              <arg index="2"><Var>x</Var></arg>
            </Atom>
          </formula>
        </Forall>
      </formula>
    </Assert>
  </act>
  <act index="6">
    <Query>
      <!-- 
         Is John responsible for Bill?
         Answers:
         Succeeds.
         Sublanguage: datalogeq         
      -->
      <formula>
        <Atom>
          <op><Rel>responsible_for</Rel></op>
          <arg index="1"><Ind>John</Ind></arg>
          <arg index="2"><Ind>Bill</Ind></arg>
        </Atom>
      </formula>
    </Query>
  </act>
  <act index="7">
    <Assert>
      <!-- 
         Rules are expressed as universally-quantified implications.
         A simple rule can be used to assert a subclass relationship:
         Every manager is an employee.         
         Sublanguage: datalog         
      -->
      <formula>
        <Forall>
          <declare>
            <Var>x</Var>
          </declare>
          <formula>
            <Implies>
              <if>
                <Atom>
                  <op><Rel>manager</Rel></op>
                  <arg index="1"><Var>x</Var></arg>
                </Atom>
              </if>
              <then>
                <Atom>
                  <op><Rel>employee</Rel></op>
                  <arg index="1"><Var>x</Var></arg>
                </Atom>
              </then>
            </Implies>
          </formula>
        </Forall>
      </formula>
      <formula>
        <Atom>
          <op><Rel>manger</Rel></op>
          <arg index="1"><Ind>John</Ind></arg>
        </Atom>
      </formula>
    </Assert>
  </act>
  <act index="8">
    <Query>
      <!-- 
         Who are the employees?
         Answers: 
         x: <Ind>Bill</Ind>
         x: <Ind>William</Ind>
         x: <Ind>John</Ind>
         Sublanguage: datalog         
      -->
      <formula>
        <Atom>
          <op><Rel>employee</Rel></op>
          <arg index="1"><Var>x</Var></arg>
        </Atom>
      </formula>
    </Query>
  </act>
  <act index="9">
    <Assert>
      <!-- 
         Equations are allowed in the body of (existential) implications. 
         If anyone is the same as Margaret, then they supervise someone.
         (Note that this rule could be semantically simplified 
         to an existential fact relying on axioms of equality.)
         Sublanguage: datalogexeq         
      -->
      <formula>
        <Forall>
          <declare>
            <Var>x</Var>
          </declare>
          <formula>
            <Implies>
              <if>
                <Equal>
                  <left>
                    <Ind>Margaret</Ind>
                  </left>
                  <right>
                    <Var>x</Var>
                  </right>
                </Equal>
              </if>
              <then>
                <Exists>
                  <declare>
                    <Var>y</Var>
                  </declare>
                  <formula>
                    <Atom>
                      <op><Rel>supervises</Rel></op>
                      <arg index="1"><Var>x</Var></arg>
                      <arg index="2"><Var>y</Var></arg>
                    </Atom>
                  </formula>
                </Exists>
              </then>
            </Implies>
          </formula>
        </Forall>
      </formula>
    </Assert>
  </act>
  <act index="10">
    <Query>
      <!-- 
         Does Margaret supervise someone?
         Answer:
         Succeeds      
         Sublanguage: datalogeq         
      -->
      <formula>
        <Exists>
          <declare>
            <Var>y</Var>
          </declare>
          <formula>
            <Atom>
              <op><Rel>supervises</Rel></op>
              <arg index="1"><Ind>Margaret</Ind></arg>
              <arg index="2"><Var>y</Var></arg>
            </Atom>
          </formula>
        </Exists>
      </formula>
    </Query>
  </act>
  <act index="11">
    <Assert>
      <!-- 
         Pairwise Disjoint Classes
         Nothing is both an employee and a department.
         Sublanguage: ncdatalog         
      -->
      <formula>
        <Forall>
          <declare>
            <Var>x</Var>
          </declare>
          <formula>
            <Implies>
              <if>
                <And>
                  <formula>
                    <Atom>
                      <op><Rel>employee</Rel></op>
                      <arg index="1"><Var>x</Var></arg>
                    </Atom>
                  </formula>
                  <formula>
                    <Atom>
                      <op><Rel>department</Rel></op>
                      <arg index="1"><Var>x</Var></arg>
                    </Atom>
                  </formula>
                </And>
              </if>
              <then>
                <Or/>
              </then>
            </Implies>
          </formula>
        </Forall>
      </formula>
    </Assert>
  </act>
  <act index="12">
    <Assert>
      <!-- HR is an employee.
         HR is a department.
         These facts together with the previous rule create an inconsistency.
         Sublanguage: datalog         
      -->
      <formula>
        <Atom>
          <op><Rel>employee</Rel></op>
          <arg index="1"><Ind>HR</Ind></arg>
        </Atom>
      </formula>
      <formula>
        <Atom>
          <op><Rel>department</Rel></op>
          <arg index="1"><Ind>HR</Ind></arg>
        </Atom>
      </formula>
    </Assert>
  </act>
  <act index="13">
    <Query>
      <!-- 
         Is there any inconsistency?
         Succeeds, indicating inconsistency. 
         Sublanguage: ncdatalog         
      -->
      <formula>
        <Or/>
      </formula>
    </Query>
  </act>
  <act index="14">
    <Retract>
      <!-- 
         Remove that HR is an employee.
         Sublanguage: datalog         
    -->
      <formula>
        <Atom>
          <op><Rel>employee</Rel></op>
          <arg index="1"><Ind>HR</Ind></arg>
        </Atom>
      </formula>
    </Retract>
  </act>
  <act index="15">
    <Query>
      <!-- 
         Is there any inconsistency?
         Fails, indicating consistency. 
         Sublanguage: ncdatalog         
      -->
      <formula>
        <Or/>
      </formula>
    </Query>
  </act>
  <act index="16">
    <Assert>
      <!-- 
         Functionality Constraint: 
         Everyone (or everything) has at most one supervisor. 
         Sublanguage: datalogeq         
      -->
      <formula>
        <Forall>
          <declare>
            <Var>x</Var>
          </declare>
          <declare>
            <Var>y</Var>
          </declare>
          <declare>
            <Var>z</Var>
          </declare>
          <formula>
            <Implies>
              <if>
                <And>
                  <formula>
                    <Atom>
                      <op><Rel>supervises</Rel></op>
                      <arg index="1"><Var>x</Var></arg>
                      <arg index="2"><Var>z</Var></arg>
                    </Atom>
                  </formula>
                  <formula>
                    <Atom>
                      <op><Rel>supervises</Rel></op>
                      <arg index="1"><Var>y</Var></arg>
                      <arg index="2"><Var>z</Var></arg>
                    </Atom>
                  </formula>
                </And>
              </if>
              <then>
                <Equal>
                  <left>
                    <Var>x</Var>
                  </left>
                  <right>
                    <Var>y</Var>
                  </right>
                </Equal>
              </then>
            </Implies>
          </formula>
        </Forall>
      </formula>
      <formula>
        <Atom>
          <op><Rel>supervises</Rel></op>
          <arg index="1"><Ind>Margaret</Ind></arg>
          <arg index="2"><Ind>Bill</Ind></arg>
        </Atom>
      </formula>
      <formula>
        <Atom>
          <op><Rel>supervises</Rel></op>
          <arg index="1"><Ind>Peggy</Ind></arg>
          <arg index="2"><Ind>Bill</Ind></arg>
        </Atom>
      </formula>
    </Assert>
  </act>
  <act index="17">
    <Query>
      <!-- 
          Is Peggy the same as Margaret?
          Answer:
          Succeeds.
          Sublanguage: datalogeq         
     -->
      <formula>
        <Equal>
          <left>
            <Ind>Peggy</Ind>
          </left>
          <right>
            <Ind>Margaret</Ind>
          </right>
        </Equal>
      </formula>
    </Query>
  </act>
  <act index="18">
    <Assert>
      <!-- 
          Negative Constraints are allowed.
          No one (or no thing) is their own supervisor. 
          Sublanguage: ncdatalog         
      -->
      <formula>
        <Forall>
          <declare>
            <Var>x</Var>
          </declare>
          <formula>
            <Implies>
              <if>
                <Atom>
                  <op><Rel>supervises</Rel></op>
                  <arg index="1"><Var>x</Var></arg>
                  <arg index="2"><Var>x</Var></arg>
                </Atom>
              </if>
              <then>
                <Or/>
              </then>
            </Implies>
          </formula>
        </Forall>
      </formula>
    </Assert>
  </act>
  <act index="19">
    <Assert>
      <!-- 
          Margaret supervises Peggy.
          Sublanguage: datalog         
    -->
      <formula>
        <Atom>
          <op><Rel>supervises</Rel></op>
          <arg index="1"><Ind>Margaret</Ind></arg>
          <arg index="2"><Ind>Peggy</Ind></arg>
        </Atom>
      </formula>
    </Assert>
  </act>
  <act index="20">
    <Query>
      <!-- 
          Is there any inconsistency?
          Succeeds, indicating inconsistency.
          Sublanguage: ncdatalog         
    -->
      <formula>
        <Or/>
      </formula>
    </Query>
  </act>
  <act index="21">
    <Retract>
      <!-- 
          Remove that Margaret supervises Peggy.
          Sublanguage: datalog         
    -->
      <formula>
        <Atom>
          <op><Rel>supervises</Rel></op>
          <arg index="1"><Ind>Margaret</Ind></arg>
          <arg index="2"><Ind>Peggy</Ind></arg>
        </Atom>
      </formula>
    </Retract>
  </act>
  <act index="22">
    <Query>
      <!-- 
          Is there any inconsistency?
          Fails, indicating consistency.
          Sublanguage: ncdatalog         
    -->
      <formula>
        <Or/>
      </formula>
    </Query>
  </act>
  <act index="23">
    <Assert>
      <!-- 
          Equations may appear in the body of negative constraints.
          The simplest case is the assertion that two individuals
          are different (as built into systems making the unique name assumption).
          Sublanguage: ncdatalogeq         
         
      -->
      <formula>
        <Implies>
          <if>
            <Equal>
              <left>
                <Ind>Sue</Ind>
              </left>
              <right>
                <Ind>Maria</Ind>
              </right>
            </Equal>
          </if>
          <then>
            <Or/>
          </then>
        </Implies>
      </formula>
    </Assert>
  </act>
  <act index="24">
    <Query>
      <!-- 
          Is Sue the same as Maria?
          Answer:
          Fails.
          Sublanguage: datalogeq         
      -->
      <formula>
        <Equal>
          <left>
            <Ind>Sue</Ind>
          </left>
          <right>
            <Ind>Maria</Ind>
          </right>
        </Equal>
      </formula>
    </Query>
  </act>
  <act index="25">
    <Assert>
      <!-- 
          Existential (Head) Rules
          Every manager directs at least one department.
          Maria is a manager.
          Sublanguage: datalogex         
      -->
      <formula>
        <Forall>
          <declare>
            <Var>M</Var>
          </declare>
          <formula>
            <Implies>
              <if>
                <Atom>
                  <op><Rel>manager</Rel></op>
                  <arg index="1"><Var>M</Var></arg>
                </Atom>
              </if>
              <then>
                <Exists>
                  <declare>
                    <Var>P</Var>
                  </declare>
                  <formula>
                    <Atom>
                      <op><Rel>directs</Rel></op>
                      <arg index="1"><Var>M</Var></arg>
                      <arg index="2"><Var>P</Var></arg>
                    </Atom>
                  </formula>
                </Exists>
              </then>
            </Implies>
          </formula>
        </Forall>
      </formula>
      <formula>
        <Atom>
          <op><Rel>manager</Rel></op>
          <arg index="1"><Ind>Maria</Ind></arg>
        </Atom>
      </formula>
    </Assert>
  </act>
  <act index="26">
    <Query>
      <!-- 
          Does Maria direct a department?
          Answer:
          Succeeds.
          Sublanguage: datalog         
      -->
      <formula>
        <Exists>
          <declare>
            <Var>P</Var>
          </declare>
          <formula>
            <Atom>
              <op><Rel>directs</Rel></op>
              <arg index="1"><Ind>Maria</Ind></arg>
              <arg index="2"><Var>P</Var></arg>
            </Atom>
          </formula>
        </Exists>
      </formula>
    </Query>
  </act>
  <act index="27">
    <Assert>
      <!-- 
          The heads and bodies of existential rules can contain conjunctions.
          Every employee who directs a department is a manager, and supervises at 
          least another employee who works in the same department.
          Sublanguage: datalogexcon         
      -->
      <formula>
        <Forall>
          <declare>
            <Var>E</Var>
          </declare>
          <declare>
            <Var>P</Var>
          </declare>
          <formula>
            <Implies>
              <if>
                <And>
                  <formula>
                    <Atom>
                      <op><Rel>employee</Rel></op>
                      <arg index="1"><Var>E</Var></arg>
                    </Atom>
                  </formula>
                  <formula>
                    <Atom>
                      <op><Rel>directs</Rel></op>
                      <arg index="1"><Var>E</Var></arg>
                      <arg index="2"><Var>P</Var></arg>
                    </Atom>
                  </formula>
                </And>
              </if>
              <then>
                <Exists>
                  <declare>
                    <Var>E'</Var>
                  </declare>
                  <formula>
                    <And>
                      <formula>
                        <Atom>
                          <op><Rel>manager</Rel></op>
                          <arg index="1"><Var>E</Var></arg>
                        </Atom>
                      </formula>
                      <formula>
                        <Atom>
                          <op><Rel>supervises</Rel></op>
                          <arg index="1"><Var>E</Var></arg>
                          <arg index="2"><Var>E'</Var></arg>
                        </Atom>
                      </formula>
                      <formula>
                        <Atom>
                          <op><Rel>works_in</Rel></op>
                          <arg index="1"><Var>E'</Var></arg>
                          <arg index="2"><Var>P</Var></arg>
                        </Atom>
                      </formula>
                    </And>
                  </formula>
                </Exists>
              </then>
            </Implies>
          </formula>
        </Forall>
      </formula>
    </Assert>
  </act>
  <act index="28">
    <Query>
      <!-- 
          Does Maria supervise someone?
          Answer:
          Succeeds.
          Sublanguage: datalog         
      -->
      <formula>
        <Exists>
          <declare>
            <Var>E'</Var>
          </declare>
          <formula>
            <Atom>
              <op><Rel>supervises</Rel></op>
              <arg index="1"><Ind>Maria</Ind></arg>
              <arg index="2"><Var>E'</Var></arg>
            </Atom>
          </formula>
        </Exists>
      </formula>
    </Query>
  </act>
</RuleML>