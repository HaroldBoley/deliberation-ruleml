namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "RuleML Meta-Logic" ]
dcterms:identifier [ "http://deliberation.ruleml.org/1.02/relaxng/modules/metalevel_expansion_module.rnc" ]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.02/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, meta-logic, entails" ]
dcterms:description [ "The expansion module for the meta-logic components." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= Entails.Node.def | head_Entails.edge.def | body_Entails.edge.def
Node.choice |= Entails.Node.def
edge.choice |= head_Entails.edge.def | body_Entails.edge.def
# Initialize patterns to allow the declaration of abstract elements while maintaining validity.
# This module declares or extends the following RuleML elements and attributes:
#            * <Entails>
#            * <if>
#            * <then>

## an extension point for specializations of the entailment tag name.  
Entails-node.choice |= Entails.Node.def
## The children of an entailment meta-formula are divided into two sections, 
## a header section for modifiers, and a main section for the antecedent and consequent rulebases. 
Entails.Node.def =
  
  ## Well-known in (meta-) logic (earlier called 'Turnstile', and 'Demo' in
  ##	Kowalski/Bowen's object/meta-level-amalgamated logic).
  ## See http://deliberation.ruleml.org/1.02/glossary/#gloss-Entails 
  element Entails { Entails.type.def }
Entails.type.def = (Entails-datt.choice & reEntails.attlist), Entails.header, Entails.main
reEntails.attlist &= commonNode.attlist?
reEntails.attlist &= style-att.choice?

## Logical entailments accept the header pattern common to Nodes.
Entails.header &= Node.header?
# For the declaration of the Node header, see the modules meta_expansion_module).
# 
# Entails.main |= notAllowed is declared in the initialization module.
# This pattern must be over-ridden to allow the Entails element to be used.
# The pattern of the main content of an entailment is serialization dependent,
# but it will contain exactly one if and one then.
# For the declaration of the main content of entailments, see the serialization modules (orderstrict_module or orderlax_module)

## an extension point for stripe skipping as well as specializations of the if tag name in entailments.  
body_Entails.name.choice |= body_Entails.edge.def
body_Entails.edge.def =
  
  ## The if of an implication rule (<Implies>) containing the Premise(s), also known as the "antecedent" part of the rule. 
  ## Also used as the "antecedent" part of an entailment (<Entails>).
  ## See http://deliberation.ruleml.org/1.02/glossary/#gloss-if
  ##  Within Entails...
  element if { body_Entails.type.def }
body_Entails.type.def = body_Entails.attlist? & body_Entails.content
body_Entails.attlist &= commonInit.attlist?

##
body_Entails.content |= EntailsFormula.choice

## The if of an entailment contains a single rulebase.
## as well as any single formula that is allowed in a Rulebase.
EntailsFormula.choice |=
  RulebaseFormula.choice
  | Rulebase-node.choice
  
## an extension point for stripe skipping as well as specializations of the then tag name in entailments.  
head_Entails.name.choice |= head_Entails.edge.def
head_Entails.edge.def =
  
  ## The then of an implication rule (<Implies>) containing the conclusion, also known as the "consequent" or "then" part of the rule. 
  ## Also used as the "consequent" part of an entailment (<Entails>).
  ## See http://deliberation.ruleml.org/1.02/glossary/#gloss-then
  ##  within Entails
  element then { head_Entails.type.def }
head_Entails.type.def = head_Entails.attlist? & head_Entails.content
head_Entails.attlist &= commonInit.attlist?

## The then of an entailment has the same content model as the if part.
head_Entails.content |= EntailsFormula.choice

