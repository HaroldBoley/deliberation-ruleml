namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "RuleML Rulebase" ]
dcterms:identifier [ "http://deliberation.ruleml.org/1.02/relaxng/modules/rulebase_expansion_module.rnc" ]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.02/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, rulebase" ]
dcterms:description [ "The expansion module for the rulebase component." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= Rulebase.Node.def
Node.choice |= Rulebase.Node.def
edge.choice |= formula_Rulebase.edge.def
# This module declares or extends the following RuleML elements and attributes:
#            * <Rulebase>
#            * <formula>

## an extension point for specializations of the rulebase tag name.  
Rulebase-node.choice |= Rulebase.Node.def
## The children of a rulebase are divided into two sections, 
## a header section for modifiers, and a main section for the rules or formulas. 
Rulebase.Node.def =
  
  ## A collection of rules or formulas that can be ordered or unordered, without or with duplicates. 
  ## See http://deliberation.ruleml.org/1.02/glossary/#gloss-Rulebase
  element Rulebase { Rulebase.type.def }
Rulebase.type.def = (Rulebase-datt.choice & reRulebase.attlist), Rulebase.header, Rulebase.main

## Rulebases may have an optional scope quantification closure attribute.
reRulebase.attlist &= mapClosure-att.choice?
# For the declaration of the scope closure attribute pattern, see the quantification closure module (closure_expansion_module)

## Rulebases accept the header pattern common to Nodes.
Rulebase.header &= Node.header?
# For the declaration of the Node header, see the modules meta_expansion_module).

## Rulebases contain zero or more formulas.
Rulebase.main |= formula_Rulebase-edge.choice*

## an extension point for stripe skipping as well as specializations of the formula tag name in rulebases.  
formula_Rulebase-edge.choice |= formula_Rulebase.edge.def
formula_Rulebase.edge.def =
  
  ## The formula edge of a conjunctive (<And>) or disjunctive (<Or>) expression, 
  ## quantifier (<Forall> or <Exists>), or performative (<Assert>, <Query> or <Retract>).
  ## See http://deliberation.ruleml.org/1.02/glossary/#gloss-formula
  ## Within Rulebase ...
  element formula { formula_Rulebase.type.def }
formula_Rulebase.type.def = formula_Rulebase.attlist? & formula_Rulebase.content
formula_Rulebase.content |= RulebaseFormula.choice

## formulas allowed to belong to a Rulebase: 
## Atomic formulas are allowed in rulebases.
RulebaseFormula.choice |=
  SimpleFormula-node.choice
  | And-fo-node.choice
  | Or-fo-node.choice
  | Negation-node.choice
  | NegationAsFailure-node.notallowed
  | Implication-node.choice
  | Forall-node.choice
  | Exists-fo-node.choice
# For the declaration of the simple formula pattern, see the atomic formula module ( atom_expansion_module) 
# For the declaration of conjunctive and disjunctive formula patterns, see the conjunction and disjunction module (andor_expansion_module)
# For the declaration of the strong negation formula pattern, see the strong negation module ( neg_expansion_module) 
# For the declaration of the weak negation formula pattern, see the weak negation module ( naf_expansion_module) 
# For the declaration of the implication pattern, see the implication modules (implication_expansion_module and equivalence_expansion_module)
# For the declaration of the quantification patterns, see the quantification module (quantifier_module)
formula_Rulebase.attlist &= commonInit.attlist?
reRulebase.attlist &= commonNode.attlist?
reRulebase.attlist &= style-att.choice?
