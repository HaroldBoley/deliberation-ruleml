namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "RuleML Conjunctions and Disjunctions - within Query" ]
dcterms:identifier [ "http://deliberation.ruleml.org/1.03/relaxng/modules/andor_query_expansion_module.rnc" ]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.03/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, conjunction, disjunction, query" ]
dcterms:description [ "The expansion module for conjunctions and disjunctions within queries." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= And-Query-node.choice | Or-Query-node.choice | formula_And.edge.def | formula_Or.edge.def
Node.choice |= And-Query-node.choice | Or-Query-node.choice
include "andor_expansion_module.rnc" {
  start |= notAllowed
  Node.choice |= notAllowed
}

## an extension point for specializations of the conjunction tag name in queries.  
And-Query-node.choice |= And-Query.Node.def

## Within Query...
And-Query.Node.def =
  
  ##
  element And { And-Query.type.def }
And-Query.type.def = (And-Query-datt.choice & reAnd-Query.attlist), And.header, And.main

## Within query, conjunctions may have an optional existential closure attribute.
reAnd-Query.attlist &= commonNode.attlist?
reAnd-Query.attlist &= closure-att.choice?
reAnd-Query.attlist &= mapClosure-att-fo.choice?
# For the declaration of the closure attribute pattern, see the quantification closure module (closure_expansion_module)

## an extension point for specializations of the disjunction tag name in queries.  
Or-Query-node.choice |= Or-Query.Node.def

## Within Query...
Or-Query.Node.def =
  
  ##
  element Or { Or-Query.type.def }
Or-Query.type.def = (Or-Query-datt.choice & reOr-Query.attlist), Or.header, Or.main

## Within query, disjunctions may have an optional existential closure attribute.
reOr-Query.attlist &= commonNode.attlist?
reOr-Query.attlist &= closure-att.choice?
reOr-Query.attlist &= mapClosure-att-fo.choice?
# For the declaration of the closure attribute pattern, see the quantification closure module (closure_expansion_module)
