namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "RuleML Performatives Content" ]
dcterms:identifier [ "http://deliberation.ruleml.org/1.03/relaxng/modules/performative_content_expansion_module.rnc" ]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.03/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, performative, assert, retract, query" ]
dcterms:description [ "The expansion module for performative content models." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= notAllowed
# This module declares the following RuleML elements and attribute:
#            * AssertRetractFormula.choice
#            * QueryFormula.choice

## Formulas allowed in assertions and retractions:
## Simple formulas are allowed in assertions and retractions in all sub-languages.
## Conjunctions and disjunctions are allowed in assertions and retractions in sub-languages that contain these components.
## Implications and universal quantifications is allowed in assertions and retractions for all quantified sub-languages.
## Strong and weak negation are allowed in assertions and retractions for all sub-languages that contain these components.
## Existential quantification is added to assertions and retractions for full first-order sub-languages.
AssertRetractFormula.choice |=
  SimpleFormula-node.choice
  | And-fo-node.choice
  | Or-fo-node.choice
  | Negation-node.choice
  | NegationAsFailure-node.notallowed
  | Implication-node.choice
  | Forall-node.choice
  | Exists-fo-node.choice
# For the declaration of the simple formula pattern, see the atomic formula module ( atom_expansion_module) 
# For the declaration of conjunctive and disjunctive formula patterns, see the conjunction and disjunction module (andor_expansion_module)
# For the declaration of the strong negation formula pattern, see the strong negation module ( neg_expansion_module) 
# For the declaration of the weak negation formula pattern, see the weak negation module ( naf_expansion_module) 
# For the declaration of the implication pattern, see the implication modules (implication_expansion_module and equivalence_expansion_module)
# For the declaration of the quantification patterns, see the quantification module (quantifier_module)
# For patterns containing "fo" see the first-order logic module (folog_base_module)

## Also meta-logic statements of proof-theoretic entailment and rulebase declaration may be allowed in assertions and retractions. 
AssertRetractFormula.choice |= Entails-node.choice | Rulebase-node.choice
# For the declaration of the entailment and rulebase patterns, see the meta-logic module (meta_module)

## Formulas allowed in queries:
## Simple formulas are allowed in queries in all sub-languages.
## Conjunctions and disjunctions are allowed in queries in sub-languages that contain these components.
## Existential quantifications is allowed in queries for all quantified sub-languages.
## Strong and weak negation are allowed in queries for all sub-languages that contain these components.
## Implications and universal quantification are added to queries for full first-order sub-languages.
QueryFormula.choice |=
  SimpleFormula-node.choice
  | And-Query-node.choice
  | Or-Query-node.choice
  | Negation-node.choice
  | NegationAsFailure-node.choice
  | Implication-fo-node.choice
  | Forall-fo-node.choice
  | Exists-node.choice
# For the declaration of the simple formula pattern, see the atomic formula module ( atom_expansion_module) 
# For the declaration of conjunctive and disjunctive formula patterns, see the conjunction and disjunction module (andor_expansion_module)
# For the declaration of the strong negation formula pattern, see the strong negation module ( neg_expansion_module) 
# For the declaration of the weak negation formula pattern, see the weak negation module ( naf_expansion_module) 
# For the declaration of the implication pattern, see the implication modules (implication_expansion_module and equivalence_expansion_module)
# For the declaration of the quantification patterns, see the quantification module (quantifier_module)

## Also meta-logic statements of proof-theoretic entailment and rulebase declaration are  allowed in queries. 
QueryFormula.choice |= Entails-node.choice | Rulebase-node.choice
# For the declaration of the entailment and rulebase formula pattern, see the meta-logic and rulebase modules ( meta_module and rulebase_module) 
