namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "RuleML Long Names" ]
dcterms:identifier [ "http://deliberation.ruleml.org/1.03/relaxng/modules/long_name_expansion_module.rnc" ]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.03/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, long names" ]
dcterms:description [ "The expansion module for human-readable names." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= notAllowed
#
cardinality-att.choice |= cardinality.attrib.def
cardinality.attrib.def = attribute cardinality { cardinality.value }
#
interpretation-att.choice |= interpretation.attrib.def
interpretation.attrib.def = attribute interpretation { interpretation.value }
#
singlevalued-att.choice |= singlevalued.attrib.def
singlevalued.attrib.def = attribute singlevalued { val.value }
#
Relation-node.choice |= Relation.Node.def
Relation.Node.def = element Relation { (Rel-datt.choice & reRel.attlist), Rel.content }
#
Expression-node.choice |= Expression.Node.def
Expression.Node.def =
  element Expression { (Expr-datt.choice & reExpr.attlist), Expr.header, Expr.main }
#
Function-node.choice |= Function.Node.def
Function.Node.def = element Function { (Fun-datt.choice & reFun.attlist), Fun.content }
#
NegationAsFailure-node.choice |= NegationAsFailure.Node.def
NegationAsFailure.Node.def =
  element NegationAsFailure { (Naf-datt.choice & reNaf.attlist), Naf.header, Naf.main }
#
Negation-node.choice |= Negation.Node.def
Negation.Node.def = element Negation { (Neg-datt.choice & reNeg.attlist), Neg.header, Neg.main }
#
Equation-node.choice |= Equation.Node.def
Equation.Node.def =
  element Equation { (Equal-datt.choice & reEqual.attlist), Equal.header, Equal.main }
#
Variable-node.choice |= Variable.Node.def
Variable.Node.def = element Variable { (Var-datt.choice & reVar.attlist), Var.content }
#
Individual-node.choice |= Individual.Node.def
Individual.Node.def = element Individual { (Ind-datt.choice & reInd.attlist), Ind.content }
#
operatorForAtoms-edge.choice |= operator_Atom.edge.def
operator_Atom.edge.def = element operator { op_Atom.attlist? & op_Atom.content }
#
objectIdentifier-edge.choice |= objectIdentifier.edge.def
objectIdentifier.edge.def = element objectIdentifier { oid.attlist? & oid.content }
#
operatorForExpressions-edge.choice |= operator_Expr.edge.def
operator_Expr.edge.def = element operator { op_Expr.attlist? & op_Expr.content }
#
positionalArgument-edge.choice |= argument.edge.def
argument.edge.def = element argument { (arg-datt.choice & rearg.attlist), arg.content }
#
leftSide-edge.choice |= leftHandSide.edge.def
leftHandSide.edge.def = element leftHandSide { left.attlist? & left.content }
#
rightSide-edge.choice |= rightHandSide.edge.def
rightHandSide.edge.def = element rightHandSide { right.attlist? & right.content }
reEqual.attlist &= empty
oid.attlist &= empty
reNaf.attlist &= empty
rearg.attlist &= empty
reRel.attlist &= empty
reInd.attlist &= empty
op_Atom.attlist &= empty
reFun.attlist &= empty
left.attlist &= empty
right.attlist &= empty
reNeg.attlist &= empty
reVar.attlist &= empty
op_Expr.attlist &= empty
