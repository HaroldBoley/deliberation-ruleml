namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "RuleML Performatives" ]
dcterms:identifier [ "http://deliberation.ruleml.org/1.03/relaxng/modules/performative_expansion_module.rnc" ]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.03/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, performative, assert, retract, query" ]
dcterms:description [ "The expansion module for performative components." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |=
  RuleML.def
  | Assert.Node.def
  | Retract.Node.def
  | Query.Node.def
  | formula_AssertRetract.edge.def
  | formula_Query.edge.def
Node.choice |= RuleML.def | Assert.Node.def | Retract.Node.def | Query.Node.def
edge.choice |= formula_AssertRetract.edge.def | formula_Query.edge.def
# This module declares the following RuleML elements and attribute:
#            * <RuleML> !
#            * <Assert> !
#            * <Retract>
#            * <Query>
#            * <act>
#            * <formula>

##
RuleML.def =
  
  ## The polyadic top_level of a RuleML document.
  ## See http://deliberation.ruleml.org/1.03/glossary/#gloss-RuleML
  element RuleML { RuleML.type.def }
RuleML.type.def = (RuleML-datt.choice & reRuleML.attlist), RuleML.header, RuleML.main

## The RuleML root element accepts the header pattern common to Nodes.
RuleML.header &= Node.header?

## The RuleML root element contains zero or more performatives.
RuleML.main |= act-edge.choice*

## an extension point for stripe skipping as well as specializations of the formula tag name in assertions and retractions.  
act-edge.choice |= act.edge.def
act.edge.def =
  
  ## The action edge of a RuleML root which associates zero to many performatives with the root.
  ## See http://deliberation.ruleml.org/1.03/glossary/#gloss-act
  element act { act.type.def }

## The type of the action edge
act.type.def = (act-datt.choice & react.attlist), act.content

## The attribute @index is required for the positional argument edge.
act-datt.choice |= index-attrib.choice

## The action type accepts the common attributes. 
react.attlist &= commonInit.attlist?

## contains one performative.
act.content |= Performative.choice

## Performatives include assertions, retractions and queries.
Performative.choice |= AssertRetract-node.choice | Query-node.choice

## a convenience pattern combining assertions and retractions
AssertRetract-node.choice |= Assert-node.choice | Retract-node.choice

## an extension point for specializations of the assertion tag name.  
Assert-node.choice |= Assert.Node.def
## The children of an assertion performative are divided into two sections, 
## a header section for modifiers, and a main section for the asserted rulebase or formula. 
Assert.Node.def =
  
  ## A KQML-like performative acting as a wrapper specifying that its content is 
  ## asserted, making an 'implicit <Rulebase>' assumption.
  ## See http://deliberation.ruleml.org/1.03/glossary/#gloss-Assert
  element Assert { Assert.type.def }
Assert.type.def =
  (AssertRetract-datt.choice & reAssertRetract.attlist), AssertRetract.header, AssertRetract.main

## an extension point for specializations of the retraction tag name.  
Retract-node.choice |= Retract.Node.def
## The children of a rectraction performative are divided into two sections, 
## a header section for modifiers, and a main section for the retracted rulebase or formula. 
Retract.Node.def =
  
  ## A performative similar to KQML's 'untell' that acts as a wrapper specifying that its
  ## content is to be deleted, making an 'implicit <Rulebase>' assumption.
  ## See http://deliberation.ruleml.org/1.03/glossary/#gloss-Retract
  element Retract { Retract.type.def }
Retract.type.def =
  (AssertRetract-datt.choice & reAssertRetract.attlist), AssertRetract.header, AssertRetract.main

## Assertions and retractions may have an optional scope closure attribute.
reAssertRetract.attlist &= mapClosure-att.choice?
# For the declaration of the scope closure attribute pattern, see the quantification closure module (closure_expansion_module)

## Assertions and retractions accept the header pattern common to Nodes.
AssertRetract.header &= Node.header?
# The object header is initialized to be empty, and may be over-ridden by optional modules. See the object identifier module (desc_module).

## Assertions and retractions contain zero or more formulas.
AssertRetract.main |= formula_AssertRetract-edge.choice*

## an extension point for stripe skipping as well as specializations of the formula tag name in assertions and retractions.  
formula_AssertRetract-edge.choice |= formula_AssertRetract.edge.def
formula_AssertRetract.edge.def =
  
  ## The formula edge of a conjunctive (<And>) or disjunctive (<Or>) expression, 
  ## quantifier (<Forall> or <Exists>), or performative (<Assert>, <Query> or <Retract>).
  ## See http://deliberation.ruleml.org/1.03/glossary/#gloss-formula
  ## Within Assert or Retract...
  element formula { formula_AssertRetract.type.def }
formula_AssertRetract.type.def = formula_AssertRetract.attlist? & formula_AssertRetract.content

## Forumulas within assertions and retractions contain a single formula.
formula_AssertRetract.content |= AssertRetractFormula.choice

## an extension point for specializations of the query tag name.  
Query-node.choice |= Query.Node.def
## The children of a query performative are divided into two sections, 
## a header section for modifiers, and a main section for the query formula. 
Query.Node.def =
  
  ## A KQML-like performative acting as a wrapper specifying that its content is
  ## queried, making an 'implicit <Rulebase>' assumption.
  ## See http://deliberation.ruleml.org/1.03/glossary/#gloss-Query
  element Query { Query.type.def }
Query.type.def = (Query-datt.choice & reQuery.attlist), Query.header, Query.main

## Queries may have an optional map closure attribute 
## and will accept a scoped closure attribute at full first-order logic.
reQuery.attlist &= closure-att.choice?
reQuery.attlist &= mapClosure-att-fo.choice?
# For the declaration of the closure attribute pattern, see the quantification closure module (closure_expansion_module)

## Queries accept the header pattern common to Nodes.
Query.header &= Node.header?
# The object header may be positionally-dependent, 
# see the position-(in)dependence serialization modules (orderstrict_module, orderlax_module).

## The content model of queries consists of zero or more formulas.
Query.main |= formula_Query-edge.choice*

## an extension point for stripe skipping as well as specializations of the formula tag name in queries.  
formula_Query-edge.choice |= formula_Query.edge.def
formula_Query.edge.def =
  
  ## The formula edge of a conjunctive (<And>) or disjunctive (<Or>) expression, 
  ## quantifier (<Forall> or <Exists>), or performative (<Assert>, <Query> or <Retract>).
  ## See http://deliberation.ruleml.org/1.03/glossary/#gloss-formula
  ## Within Query ...
  element formula { formula_Query.type.def }
formula_Query.type.def = formula_Query.attlist? & formula_Query.content

## The content model of a forumula within queries is a single formula.
formula_Query.content |= QueryFormula.choice

## The RuleML type accepts the common Node attributes. 
reRuleML.attlist &= commonNode.attlist?
reRuleML.attlist &= style-att.choice?

## The Assert/Retract type accepts the common Node attributes. 
reAssertRetract.attlist &= commonNode.attlist?
reAssertRetract.attlist &= style-att.choice?

## The Query type accepts the common Node attributes. 
reQuery.attlist &= commonNode.attlist?
reQuery.attlist &= style-att.choice?

## The Assert/Retract formula type accepts the common attributes. 
formula_AssertRetract.attlist &= commonInit.attlist?

## The Query formula type accepts the common attributes. 
formula_Query.attlist &= commonInit.attlist?
