namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "RuleML Higher-Order Syntax" ]
dcterms:identifier [ "http://deliberation.ruleml.org/1.03/relaxng/modules/holog_expansion_module.rnc" ]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.03/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, higher-order syntax, nonpredicative" ]
dcterms:description [ "The expansion module for higher-order syntax, also called non-predicative." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= notAllowed

## Allow any term as the operator of an Atom or Expr
op_Atom.content |= AnyTerm.choice
op_Expr.content |= AnyTerm.choice

## Let Uniterm be an alias for Atom
Atom-node.choice |= Uniterm-formula.Node.def
Uniterm-formula.Node.def =  
  ## simple sentence represented as a Hilog term, generalizing Atom
  ## http://deliberation.ruleml.org/1.03/glossary/#gloss-Uniterm
  element Uniterm { Uniterm-formula.type.def }
Uniterm-formula.type.def = (Atom-datt.choice & reAtom.attlist), Atom.header, Atom.main
#operatorForAtoms-edge.choice |= empty

## Let Uniterm be an alias for Expr
Expression-node.choice |= Uniterm-term.Node.def
Uniterm-term.Node.def =
  ## Also, compound function, relation, or term represented as a Hilog term, generalizing Expr
  element Uniterm { Uniterm-term.type.def }
Uniterm-term.type.def = (Expr-datt.choice & reExpr.attlist), Expr.header, Expr.main
#operatorForExpressions-edge.choice |= empty

## Let Const be an alias for Ind
Individual-node.choice |= Const.Node.def
Const.Node.def =
  
  ## <Const>: a constant. See 
  ## http://deliberation.ruleml.org/1.03/glossary/#gloss-Const
  element Const { Const.type.def }
Const.type.def = (Ind-datt.choice & reInd.attlist), Ind.value
