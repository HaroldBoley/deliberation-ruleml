default namespace = "http://ruleml.org/spec"
namespace ns1 = "http://www.w3.org/2001/XMLSchema-instance"

start =
  RuleML
  | Assert
  | Retract
  | Query
  | Atom
  | Rel
  | And
  | Or
  | Implies
  | Forall
  | Exists
  | Equal
  | Data
  | Ind
  | Var
  | formula
  | formula_2
  | op
  | formula_3
  | formula_4
  | then
  | if
  | declare
  | formula_5
  | formula_6
  | left
  | right
  | arg
RuleML =
  element RuleML {
    (attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (act | Assert | Retract | Query)*
  }
Assert =
  element Assert {
    (attribute mapMaterial { "yes" }?
     & attribute mapDirection { "bidirectional" }?
     & attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (formula | Atom | Equal | Implies | Forall)*
  }
Retract =
  element Retract {
    (attribute mapMaterial { "yes" }?
     & attribute mapDirection { "bidirectional" }?
     & attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (formula | Atom | Equal | Implies | Forall)*
  }
Query =
  element Query {
    (attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (formula_2 | Atom | Equal | And | Or | Exists)*
  }
Atom =
  element Atom {
    (attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    ((op | Rel) & (Ind | Data | Var | arg)*)
  }
Rel =
  element Rel {
    (attribute iri {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute ns1:schemaLocation { text }?),
    xsd:token
  }
And =
  element And {
    attribute ns1:schemaLocation { text }?,
    (formula_3 | Atom | Equal | And_2 | Or_2)*
  }
Or =
  element Or {
    attribute ns1:schemaLocation { text }?,
    (formula_4 | Atom | Equal | And_2 | Or_2)*
  }
Implies =
  element Implies {
    (attribute direction { "bidirectional" }?
     & attribute material { "yes" }?
     & attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    ((if & then)
     | ((Atom | Equal | And_3 | Or_3 | Exists_2), if)
     | (then, (Atom | Equal | And_2 | Or_2))
     | ((Atom | Equal | And_2 | Or_2),
        (Atom | Equal | And_3 | Or_3 | Exists_2))
     | ((Atom | Equal | And_2 | Or_2), then)
     | (if, (Atom | Equal | And_3 | Or_3 | Exists_2)))
  }
Forall =
  element Forall {
    (attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (declare | Var)+,
    (formula_5 | Atom | Equal | Implies | Forall)
  }
Exists =
  element Exists {
    (attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (declare | Var)+,
    (formula_6 | Atom | Equal | And_2 | Or_2 | Exists)
  }
Equal =
  element Equal {
    (attribute oriented { "no" }?
     & attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (Ind | Data | Var | left),
    (Ind | Data | Var | right)
  }
Data =
  element Data {
    attribute ns1:schemaLocation { text }?
    & text
    & _1*
  }
Ind =
  element Ind {
    (attribute iri {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute ns1:schemaLocation { text }?),
    xsd:token
  }
Var =
  element Var {
    attribute ns1:schemaLocation { text }?,
    xsd:token
  }
formula =
  element formula {
    attribute ns1:schemaLocation { text }?
    & (Atom | Equal | Implies | Forall)
  }
formula_2 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & (Atom | Equal | And | Or | Exists)
  }
op =
  element op {
    attribute ns1:schemaLocation { text }?
    & Rel
  }
formula_3 =
  element formula {
    attribute index { xsd:positiveInteger }?
    & attribute ns1:schemaLocation { text }?
    & (Atom | Equal | And_2 | Or_2)
  }
formula_4 =
  element formula {
    attribute index { xsd:positiveInteger }?
    & attribute ns1:schemaLocation { text }?
    & (Atom | Equal | And_2 | Or_2)
  }
then =
  element then {
    attribute ns1:schemaLocation { text }?
    & (Atom | Equal | And_3 | Or_3 | Exists_2)
  }
if =
  element if {
    attribute ns1:schemaLocation { text }?
    & (Atom | Equal | And_2 | Or_2)
  }
declare =
  element declare {
    attribute ns1:schemaLocation { text }?
    & Var
  }
formula_5 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & (Atom | Equal | Implies | Forall)
  }
formula_6 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & (Atom | Equal | And_2 | Or_2 | Exists)
  }
left =
  element left {
    attribute ns1:schemaLocation { text }?
    & (Ind | Data | Var)
  }
right =
  element right {
    attribute ns1:schemaLocation { text }?
    & (Ind | Data | Var)
  }
arg =
  element arg {
    (attribute index { xsd:positiveInteger }
     & attribute ns1:schemaLocation { text }?),
    (Ind | Data | Var)
  }
act =
  element act {
    (attribute index { xsd:positiveInteger }
     & attribute ns1:schemaLocation { text }?),
    (Assert | Retract | Query)
  }
And_2 =
  element And {
    (attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (formula_3 | Atom | Equal | And_2 | Or_2)*
  }
Or_2 =
  element Or {
    (attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (formula_4 | Atom | Equal | And_2 | Or_2)*
  }
And_3 =
  element And {
    (attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (Atom | And_3 | Or_3 | Exists_2 | formula_7)*
  }
Or_3 =
  element Or {
    (attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (formula_8 | Atom | And_3 | Or_3 | Exists_2)*
  }
Exists_2 =
  element Exists {
    (attribute ns1:schemaLocation { text }?
     & attribute style {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (declare | Var)+,
    (Atom | And_3 | Or_3 | Exists_2 | formula_9)
  }
_1 =
  element * {
    attribute * { text }*,
    (text & _1*)
  }
formula_7 =
  element formula {
    attribute index { xsd:positiveInteger }?
    & attribute ns1:schemaLocation { text }?
    & (Atom | And_3 | Or_3 | Exists_2)
  }
formula_8 =
  element formula {
    attribute index { xsd:positiveInteger }?
    & attribute ns1:schemaLocation { text }?
    & (Atom | And_3 | Or_3 | Exists_2)
  }
formula_9 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & (Atom | And_3 | Or_3 | Exists_2)
  }
